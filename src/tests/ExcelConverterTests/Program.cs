// <autogenerated>
// Use autogenerated to suppress stylecop warnings

using System;
using System.Globalization;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Core;
using Microsoft.PowerFx.Core.Functions;
using Microsoft.PowerFx.Core.Tests;
using Microsoft.PowerFx.Core.Texl;
using Microsoft.PowerFx.Core.Types.Enums;
using Microsoft.PowerFx.Core.Utils;
using Microsoft.PowerFx.Types;
using Xunit;
using Xunit.Sdk;

// How do we unit test private methods?

namespace ExcelConverterTests
{
    public class ConverterTests
    {
        public ConverterTests()
        {
            // Ensure all tests are run with en-US locale
            // We would like to use ModuleInitializer, but that requires .Net 5 and the tests can't run on that version yet.
            // https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.moduleinitializerattribute?view=net-6.0
            CultureInfo.CurrentCulture = new CultureInfo("en-US");
        }

        [Fact]
        public void GenerateNameTests()
        {
           
        }

        [Fact]
        public void SheetSumConvertTests()
        {
            Excel2AppEngine.Converter conv = new Excel2AppEngine.Converter();
            var data = Excel2AppEngine.ExcelParser.parseSpreadsheet("TestSheet.xlsx", false);
            var engine = new Engine(new PowerFxConfig());
            var recalc = new RecalcEngine();

            foreach (ParsedCell c in data.Cells)
            {
                if (c == null) continue;

                if (c.Formula != null)
                {
                    // Node Kinds: call, unary, binary, table, record, etc
                    // Console.WriteLine("Cell {0} with value {1} and formula {2} and kind {3}", c.CellId, c.Value, c.Formula, res.Root.Kind);
                    ParseResult p = engine.Parse(c.Formula); // parse not just if formula, that way we can recognize string/numlit

                    if (p.Root.Kind == NodeKind.Call) // if the cell equals a function
                    {
                        Console.WriteLine(c.Formula);
                        conv.ProcessFunc((CallNode)p.Root);
                    }
                    else
                    {

                    }
                }
                else
                {
                    ParseResult p = engine.Parse(c.Value); // parse not just if formula, that way we can recognize string/numlit
                    if (p.Root.Kind == NodeKind.NumLit) // if the cell equals a numerical value
                    {
                        conv.CreateVariable(c.SheetName, c.CellId, (NumLitNode)p.Root);
                    }
                }
            }
        }


    }

        [Fact]
        public void CasingConvertTests()
        {
            Excel2AppEngine.Converter conv = new Excel2AppEngine.Converter();
            var engine = new RecalcEngine();

            String convertedFunc = conv.AdjustFuncName("SUM");
            Assert.Equal("Sum", convertedFunc);
            convertedFunc = conv.AdjustFuncName("ABS");
            Assert.Equal("Abs", convertedFunc);
            convertedFunc = conv.AdjustFuncName("");
            Assert.Equal("123", convertedFunc);
            convertedFunc = conv.AdjustFuncName("SUPERCALIFRAGILISTICEXPIALIDOCIOUS");
            Assert.Equal("Supercalifragilisticexpialidocious", convertedFunc);
        }

        [Fact]
        public void SheetNumLitTests()
        {
          
        }
    }
}
