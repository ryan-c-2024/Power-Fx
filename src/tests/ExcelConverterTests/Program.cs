// <autogenerated>
// Use autogenerated to suppress stylecop warnings

using System;
using System.Globalization;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Wordprocessing;
using Excel2AppEngine;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Core;
using Microsoft.PowerFx.Core.Functions;
using Microsoft.PowerFx.Core.Tests;
using Microsoft.PowerFx.Core.Texl;
using Microsoft.PowerFx.Core.Types.Enums;
using Microsoft.PowerFx.Core.Utils;
using Microsoft.PowerFx.Syntax;
using Microsoft.PowerFx.Types;
using Xunit;
using Xunit.Sdk;

// How do we unit test private methods?

namespace ExcelConverterTests
{
    public class ConverterTests
    {
        public ConverterTests()
        {
            // Ensure all tests are run with en-US locale
            // We would like to use ModuleInitializer, but that requires .Net 5 and the tests can't run on that version yet.
            // https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.moduleinitializerattribute?view=net-6.0
            CultureInfo.CurrentCulture = new CultureInfo("en-US");
        }

        [Fact]
        public void GenerateNameTests()
        {
            Assert.Equal("", ExcelConverter.Utils.GenerateGenericName("", ""));
            Assert.Equal("", ExcelConverter.Utils.GenerateGenericName(null, null));
            Assert.Equal("Sheet1_A1", ExcelConverter.Utils.GenerateGenericName("Sheet1", "A1"));
            Assert.Equal("TestSheet_E10", ExcelConverter.Utils.GenerateGenericName("TestSheet", "E10"));
            Assert.Equal("Balances_B5", ExcelConverter.Utils.GenerateGenericName("Balances", "B5"));
            Assert.Equal("Sheet1380_F4", ExcelConverter.Utils.GenerateGenericName("Sheet1380", "F4"));
            Assert.Equal("ThisIsAReallyLongSheetname_Z35", ExcelConverter.Utils.GenerateGenericName("ThisIsAReallyLongSheetname", "Z35"));
        }

        [Fact]
        public void BasicFuncConvertTests()
        {
            var recalc = new RecalcEngine();
            var engine = new Engine(new PowerFxConfig());

            var pfxValue = recalc.Eval(Utils.ProcessFunc("ABS(-123)", engine));
            Assert.Equal("123", pfxValue.ToObject().ToString());

            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("ACOS(-1)", engine));
            decimal roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("3.14", roundedDecimal.ToString());

            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("ACOT(-1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("2.36", roundedDecimal.ToString());

            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("AND(1=1, 0=0)", engine));
            Assert.Equal("True", pfxValue.ToObject().ToString());

            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("ASIN(-1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("-1.57", roundedDecimal.ToString());

            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("ATAN(-1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("-0.79", roundedDecimal.ToString());

            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("ATAN2(1, -1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("-0.79", roundedDecimal.ToString());
        }

        [Fact]
        public void NestedFuncConvertTests()
        {
            var recalc = new RecalcEngine();
            var engine = new Engine(new PowerFxConfig());

            var pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("DAY(DATE(2022, 6, 13))", engine));
            Assert.Equal("13", pfxValue.ToObject().ToString());
            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("YEAR(DATE(2022,6,13))", engine));
            Assert.Equal("2022", pfxValue.ToObject().ToString());
            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("SUM(1,SUM(1,2))", engine));
            Assert.Equal("4", pfxValue.ToObject().ToString());
            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("SUM(SUM(1,2), 1)", engine));
            Assert.Equal("4", pfxValue.ToObject().ToString());
            pfxValue = recalc.Eval(ExcelConverter.Utils.ProcessFunc("SUM(1,SUM(SUM(SUM(4,6),SUM(5,9)),2))", engine));
            Assert.Equal("27", pfxValue.ToObject().ToString());
        }

        [Fact]
        public void RangeFuncConvertTests()
        {
            var recalc = new RecalcEngine();
            var engine = new Engine(new PowerFxConfig());

        }
        

        [Fact]
        public void SheetReadTests()
        {
            var data = ExcelConverter.ExcelParser.ParseSpreadsheet("TestSheet.xlsx", false);
            HashSet<String> set = new HashSet<string>();
            foreach (ExcelConverter.ExcelParser.ParsedCell c in data.Cells)
            {
                if (c == null || c.SheetName != "SheetReadTest") continue;

                if (c.Formula != null)
                {
                    set.Add(c.Formula);
                }
                else
                {
                    set.Add(c.Value);
                }
            }

            Assert.Contains("Literal Nums", set);
            Assert.Contains("Arithmetic", set);
            Assert.Contains("Formulas", set);

            Assert.Contains("-183", set);
            Assert.Contains("0", set);
            Assert.Contains("1", set);
            Assert.Contains("1337", set);

            Assert.Contains("5+3", set);
            Assert.Contains("10-3", set);
            Assert.Contains("10*0", set);
            Assert.Contains("40/20", set);

            Assert.Contains("SUM(1,2,3)", set);
            Assert.Contains("SIN(1)", set);
            Assert.Contains("ATAN(-1)", set);
            Assert.Contains("AND(1=1, 0=0)", set);

            Assert.DoesNotContain("i say right foot creep", set);
            Assert.DoesNotContain("I do the same thing I told you that I never would", set);
            Assert.DoesNotContain("SUM(1, 2)", set);
            // add to a Set and check if each value is in the set
        }



        [Fact]
        public void CasingConvertTests()
        {
            var engine = new RecalcEngine();

            String convertedFunc = conv.AdjustFuncName("SUM");
            Assert.Equal("Sum", convertedFunc);
            convertedFunc = conv.AdjustFuncName("ABS");
            Assert.Equal("Abs", convertedFunc);
            convertedFunc = conv.AdjustFuncName("RADIANS");
            Assert.Equal("Radians", convertedFunc);
            convertedFunc = conv.AdjustFuncName("SIN");
            Assert.Equal("Sin", convertedFunc);
            convertedFunc = conv.AdjustFuncName("");
            Assert.Equal("", convertedFunc);
            convertedFunc = conv.AdjustFuncName("SUPERCALIFRAGILISTICEXPIALIDOCIOUS");
            Assert.Equal("Supercalifragilisticexpialidocious", convertedFunc);
        }

        [Fact]
        public void SheetNumLitTests()
        {
          
        }
    }
}
