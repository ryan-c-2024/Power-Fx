// <autogenerated>
// Use autogenerated to suppress stylecop warnings

using System;
using System.Globalization;
using DocumentFormat.OpenXml.Spreadsheet;
using Excel2AppEngine;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Core;
using Microsoft.PowerFx.Core.Functions;
using Microsoft.PowerFx.Core.Tests;
using Microsoft.PowerFx.Core.Texl;
using Microsoft.PowerFx.Core.Types.Enums;
using Microsoft.PowerFx.Core.Utils;
using Microsoft.PowerFx.Syntax;
using Microsoft.PowerFx.Types;
using Xunit;
using Xunit.Sdk;

// How do we unit test private methods?

namespace ExcelConverterTests
{
    public class ConverterTests
    {
        public ConverterTests()
        {
            // Ensure all tests are run with en-US locale
            // We would like to use ModuleInitializer, but that requires .Net 5 and the tests can't run on that version yet.
            // https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.moduleinitializerattribute?view=net-6.0
            CultureInfo.CurrentCulture = new CultureInfo("en-US");
        }

        [Fact]
        public void GenerateNameTests()
        {
           
        }

        [Fact]
        public void BasicFuncConvertTests()
        {
            Excel2AppEngine.Converter conv = new Excel2AppEngine.Converter();
            var recalc = new RecalcEngine();
            var engine = new Engine(new PowerFxConfig());

            var pfxValue = recalc.Eval(conv.ProcessFunc("ABS(-123)", engine));
            Assert.Equal("123", pfxValue.ToObject().ToString());

            pfxValue = recalc.Eval(conv.ProcessFunc("ACOS(-1)", engine));
            decimal roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("3.14", roundedDecimal.ToString());

            pfxValue = recalc.Eval(conv.ProcessFunc("ACOT(-1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("2.36", roundedDecimal.ToString());

            pfxValue = recalc.Eval(conv.ProcessFunc("AND(1=1, 0=0)", engine));
            Assert.Equal("True", pfxValue.ToObject().ToString());

            pfxValue = recalc.Eval(conv.ProcessFunc("ASIN(-1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("-1.57", roundedDecimal.ToString());

            pfxValue = recalc.Eval(conv.ProcessFunc("ATAN(-1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("-0.79", roundedDecimal.ToString());

            pfxValue = recalc.Eval(conv.ProcessFunc("ATAN2(1, -1)", engine));
            roundedDecimal = Math.Round(Convert.ToDecimal(pfxValue.ToObject().ToString()), 2);
            Assert.Equal("-0.79", roundedDecimal.ToString());
        }

        [Fact]
        public void NestedFuncConvertTests()
        {
            Excel2AppEngine.Converter conv = new Excel2AppEngine.Converter();
            var recalc = new RecalcEngine();
            var engine = new Engine(new PowerFxConfig());

            var pfxValue = recalc.Eval(conv.ProcessFunc("DAY(DATE(2022, 6, 13))", engine));
            Assert.Equal("13", pfxValue.ToObject().ToString());
            pfxValue = recalc.Eval(conv.ProcessFunc("YEAR(DATE(2022,6,13))", engine));
            Assert.Equal("2022", pfxValue.ToObject().ToString());

        }

        [Fact]
        public void RangeFuncConvertTests()
        {
            Excel2AppEngine.Converter conv = new Excel2AppEngine.Converter();
            var recalc = new RecalcEngine();
            var engine = new Engine(new PowerFxConfig());

        }
        

        [Fact]
        public void SheetReadTests()
        {
            var data = Excel2AppEngine.ExcelParser.ParseSpreadsheet("TestSheet.xlsx", false);
            foreach (ParsedCell c in data.Cells)
            {

            }
            // add to a Set and check if each value is in the set
        }



        [Fact]
        public void CasingConvertTests()
        {
            Excel2AppEngine.Converter conv = new Excel2AppEngine.Converter();
            var engine = new RecalcEngine();

            String convertedFunc = conv.AdjustFuncName("SUM");
            Assert.Equal("Sum", convertedFunc);
            convertedFunc = conv.AdjustFuncName("ABS");
            Assert.Equal("Abs", convertedFunc);
            convertedFunc = conv.AdjustFuncName("RADIANS");
            Assert.Equal("Radians", convertedFunc);
            convertedFunc = conv.AdjustFuncName("SIN");
            Assert.Equal("Sin", convertedFunc);
            convertedFunc = conv.AdjustFuncName("");
            Assert.Equal("", convertedFunc);
            convertedFunc = conv.AdjustFuncName("SUPERCALIFRAGILISTICEXPIALIDOCIOUS");
            Assert.Equal("Supercalifragilisticexpialidocious", convertedFunc);
        }

        [Fact]
        public void SheetNumLitTests()
        {
          
        }
    }
}
