// <autogenerated>
// Use autogenerated to suppress stylecop warnings 

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml.InkML;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Core;
using Microsoft.PowerFx.Syntax;
using Microsoft.PowerFx.Types;
using Microsoft.PowerFx.Preview;
using Microsoft.PowerFx.Interpreter;
using Newtonsoft.Json;
using DocumentFormat.OpenXml.Office2010.PowerPoint;
using DocumentFormat.OpenXml.Drawing.Charts;

namespace ExcelConverter
{
    public class Converter
    {
        public static void Main(string[] args)
        {
            // would it be more efficient to run some of the processing AS WE ARE PARSING instead of after we're done?

            ExcelParser.ParsedExcelData data = ExcelParser.ParseSpreadsheet(@"test.xlsx"); // parse Excel spreadsheet and extract data
            Converter conv = new Converter();
            var engine = new Engine(new PowerFxConfig());

            // Iterate through all parsed cells and convert to PFX if applicable            
            foreach (ExcelParser.ParsedCell c in data.Cells)
            {
                if (c == null) continue;

                if (c.Formula != null) // preprocess any ranges
                {
                    // regex matches any range (eg. A4:C9) that isn't within quotes
                    Regex rx = new Regex(@"([A-Z]\d+):([A-Z]\d+)(?=([^""']*[""'][^""']*[""'])*[^""']*$)");
                    c.Formula = rx.Replace(c.Formula, "$1_RANGE_$2"); // Replace with eg. A4_RANGE_C9
                }

                // parse formula if there is one, otherwise parse literal value in the cell
                ParseResult p = c.Formula == null ? engine.Parse(c.Value) : engine.Parse(c.Formula);
                
                // only want to run PFX conversion if either a formula or a literal number node
                if (c.Formula != null || p.Root.Kind == NodeKind.NumLit) 
                {
                    String result = ParsedCellAnalyzer.Analyze(p.Root, c);
                    Console.WriteLine(Utils.CreateVariable(c.SheetName, c.CellId, result.ToString()));
                }
            }
        }

    }
}
