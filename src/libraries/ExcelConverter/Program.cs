// <autogenerated>
// Use autogenerated to suppress stylecop warnings 

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml.InkML;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Core;
using Microsoft.PowerFx.Syntax;
using Microsoft.PowerFx.Types;
using Microsoft.PowerFx.Preview;
using Microsoft.PowerFx.Interpreter;
using Newtonsoft.Json;
using DocumentFormat.OpenXml.Office2010.PowerPoint;
using DocumentFormat.OpenXml.Drawing.Charts;

namespace ExcelConverter
{
    public class Converter
    {
        // public Converter() { } // do we have to do this to access constructor from outside this file????

        public static void Main(string[] args)
        {
            // would it be more efficient to run some of the processing AS WE ARE PARSING instead of after we're done?

            ExcelParser.ParsedExcelData data = ExcelParser.ParseSpreadsheet(@"test.xlsx"); // parse Excel spreadsheet and extract data
            Converter conv = new Converter();
            var engine = new Engine(new PowerFxConfig());
            //ParsedCellAnalyzer pc = new ParsedCellAnalyzer();
            
            foreach (ExcelParser.ParsedCell c in data.Cells)
            {
                if (c == null) continue;


                if (c.Formula != null)
                {
                    ParseResult p = engine.Parse(c.Formula); // parse not just if formula, that way we can recognize string/numlit
                    var result = ParsedCellAnalyzer.Analyze(p.Root, c);
                    Console.WriteLine(result);

                    /*
                      if (p.Root.Kind == NodeKind.Call) // if the cell equals a function
                    {
                        Console.WriteLine(conv.ProcessFunc((CallNode)p.Root, c));
                    }
                    else
                    {

                    }
                    */

                }
                else
                {
                    ParseResult p = engine.Parse(c.Value); // parse not just if formula, that way we can recognize string/numlit
                    var result = ParsedCellAnalyzer.Analyze(p.Root, c);
                    Console.WriteLine(result);

                    /*
                      if (p.Root.Kind == NodeKind.NumLit) // if the cell equals a numerical value
                    {
                        conv.CreateVariable(c.SheetName, c.CellId, (NumLitNode)p.Root);
                    }
                    */
                }
            }
        }

            }
}
