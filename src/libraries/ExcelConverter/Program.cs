// <autogenerated>
// Use autogenerated to suppress stylecop warnings 

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml.InkML;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Core;
using Microsoft.PowerFx.Syntax;
using Microsoft.PowerFx.Types;
using Microsoft.PowerFx.Preview;
using Microsoft.PowerFx.Interpreter;
using Newtonsoft.Json;
using DocumentFormat.OpenXml.Office2010.PowerPoint;
using DocumentFormat.OpenXml.Drawing.Charts;

namespace ExcelConverter
{
    public class Converter
    {
        public static void Main(string[] args)
        {
            // would it be more efficient to run some of the processing AS WE ARE PARSING instead of after we're done?

            ExcelParser.ParsedExcelData data = ExcelParser.ParseSpreadsheet(@"test.xlsx"); // parse Excel spreadsheet and extract data
            Converter conv = new Converter();
            var engine = new Engine(new PowerFxConfig());

            // Iterate through all parsed cells and convert to PFX if applicable            
            foreach (ExcelParser.ParsedCell c in data.Cells)
            {
                if (c == null || processedSet.Contains(c.CellId)) continue;

                ParseResult p;
                if (c.Formula != null) 
                {
                    c.Formula = Utils.ReformatRange(c.Formula); // If formula has a range, preprocess and reformat it
                    p = engine.Parse(c.Formula);
                }
                else
                {
                    p = engine.Parse(c.Value);
                }
                
                // only want to run PFX conversion if either a formula or a literal number node
                if (c.Formula != null || p.Root.Kind == NodeKind.NumLit) 
                {
                    // Convert to PFX then add it to our output list
                    String result = ParsedCellAnalyzer.Analyze(p.Root, c);

                    if (!processedSet.Contains(c.CellId))
                    {
                        outputList.Add(Utils.CreateVariable(c.SheetName, c.CellId, result.ToString()));
                    }
                    processedSet.Add(c.CellId);
                }
            }

            foreach (String converted in outputList)
            {
                Console.WriteLine(converted);
            }
        }

        public static List<String> outputList = new List<String>();
        public static HashSet<String> processedSet = new HashSet<String>();
    }
}
