// <autogenerated>
// Use autogenerated to suppress stylecop warnings

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Syntax;

namespace Excel2AppEngine
{
    /*
     * 1. ParsedCellAnalyzer can extend TexlVisitor
     * 2. ParsedCellAnalyzer.Analyze(string formula): use engine to parse nodes of formula
     * 3. Analyze(TexlNode node): "general recursion" - switch on node type, process nodes, or Accept new ParsedCellAnalyzer instance in child nodes/args
     * 4. ParsedCellAnalyzer: hold any object structures needed for that specific node, implement any specific functions
     *  e.g., Variable names <-> Identifier map, ranges as list of cells, calling pretty print, etc.
     *  
     *  Flow:
     *      - Parse Excel workbook
     *      - Pass parsed cell formulas to ParsedCellAnalyzer.Analyze(string formula)
     *      - Use PFX Engine to parse formula
     *      - Pass formula root node to Analyze(TexlNode node)
     */

    public class ParsedCellAnalyzer : TexlVisitor
    {
        private string transformedOutput;

        public ParsedCellAnalyzer()
        {
            transformedOutput = "";
        }


        private static string Analyze(string formula, ParsedCell cell = null)
        {
            var engine = new Engine(new PowerFxConfig());
            var parseResult = engine.Parse(formula);
            return Analyze(parseResult.Root, cell);
        }

        private static string Analyze(TexlNode node, ParsedCell cell = null)
        {
            // ACCEPT AND VISIT ALL RETURN VOID SO DATA TO RETURNED SOME OTHER WAY

            var retVal = "";
            switch (node.Kind)
            {
                case NodeKind.NumLit:
                    // how can we do this? we need ParsedCell object to get sheet name and cell ID
                    //GenerateGenericName()
                    var analyzer = new ParsedCellAnalyzer();
                    node.Accept(analyzer);
                    break;
                case NodeKind.BinaryOp:
                    var binaryOpNode = (BinaryOpNode)node;

                    // analyze left + right side nodes
                    var leftAnalyzer = new ParsedCellAnalyzer();
                    binaryOpNode.Left.Accept(leftAnalyzer);

                    var rightAnalyzer = new ParsedCellAnalyzer();
                    binaryOpNode.Right.Accept(rightAnalyzer);

                    // Maybe adding the "+" could also be done in the Pre or Post visit
                    retVal += leftAnalyzer.GetConvertedOutput() + " + " + rightAnalyzer.GetConvertedOutput();
                    break;
                case NodeKind.Call:
                    var callNode = (CallNode)node;
                    // process function

                    // analyze child nodes
                    foreach (var argNode in callNode.Args.ChildNodes)
                    {
                        var analyzer = new ParsedCellAnalyzer();
                        argNode.Accept(analyzer);
                        retVal += analyzer.GetConvertedOutput() + ",";
                    }

                    if (retVal.EndsWith(','))
                    {
                        retVal = retVal.Trim(',');
                    } 
                    

                  //  node.Accept(analyzer);
                    break;
                default:
                    if (cell != null)
                    {
                        retVal += cell + node.ToString();
                    }
                    else
                    {
                        retVal += node.ToString();
                    }
                    break;
            }

            return retVal;
        }

        public String GetConvertedOutput() // wrapper function that returns transformed output string
        {
            return transformedOutput;
        }

        public override bool PreVisit(CallNode node)
        {
            var retVal = Analyze(node, null);
            transformedOutput += retVal;
            Console.WriteLine(retVal);
            //var retVal = Analyze(node);

            return false;
        }

        public override bool PreVisit(BinaryOpNode node)
        {
            var retVal = Analyze(node, null);
            transformedOutput += retVal;
            return false;
        }

        public override void PostVisit(StrInterpNode node)
        {
        }

        public override void PostVisit(DottedNameNode node)
        {
        }

        public override void PostVisit(UnaryOpNode node)
        {
        }

        public override void PostVisit(BinaryOpNode node)
        {
        }

        public override void PostVisit(VariadicOpNode node)
        {
        }

        public override void PostVisit(CallNode node)
        {

        }

        public override void PostVisit(ListNode node)
        {
        }

        public override void PostVisit(RecordNode node)
        {
        }

        public override void PostVisit(TableNode node)
        {
        }

        public override void PostVisit(AsNode node)
        {
        }

        public override void Visit(ErrorNode node)
        {
        }

        public override void Visit(BlankNode node)
        {
        }

        public override void Visit(BoolLitNode node)
        {
            transformedOutput += node.ToString();
        }

        public override void Visit(StrLitNode node)
        {
            transformedOutput += node.ToString();
        }

        public override void Visit(NumLitNode node)
        {
            //transformedOutput = Converter.CreateVariable(cell.SheetName, cell.CellId, node);
            transformedOutput += node.ToString();
        }

        public override void Visit(FirstNameNode node)
        {
            // I THINK....
            // expand range (contains _range_)
            // replace with defined name or generic variable name
            if (cell == null)
            {
                transformedOutput += Converter.GenerateGenericName()
            }
            transformedOutput += node.ToString();
        }

        public override void Visit(ParentNode node)
        {
        }

        public override void Visit(SelfNode node)
        {
        }
    }
}
