// <autogenerated>
// Use autogenerated to suppress stylecop warnings

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Syntax;

namespace Excel2AppEngine
{
    /*
     * 1. ParsedCellAnalyzer can extend TexlVisitor
     * 2. ParsedCellAnalyzer.Analyze(string formula): use engine to parse nodes of formula
     * 3. Analyze(TexlNode node): "general recursion" - switch on node type, process nodes, or Accept new ParsedCellAnalyzer instance in child nodes/args
     * 4. ParsedCellAnalyzer: hold any object structures needed for that specific node, implement any specific functions
     *  e.g., Variable names <-> Identifier map, ranges as list of cells, calling pretty print, etc.
     *  
     *  Flow:
     *      - Parse Excel workbook
     *      - Pass parsed cell formulas to ParsedCellAnalyzer.Analyze(string formula)
     *      - Use PFX Engine to parse formula
     *      - Pass formula root node to Analyze(TexlNode node)
     */

    public class ParsedCellAnalyzer : TexlVisitor
    {
        //private string transformed;

        private ParsedCellAnalyzer()
        {
            //transformed = "";
        }

        public static string Analyze(string formula)
        {
            var engine = new Engine(new PowerFxConfig());
            var parseResult = engine.Parse(formula);
            return Analyze(parseResult.Root);
        }

        private static string Analyze(TexlNode node)
        {
            var retVal = "";
            var analyzer = new ParsedCellAnalyzer();
            Console.WriteLine("Current node: {0}", node.ToString());
            switch (node.Kind)
            {
                case NodeKind.Call:
                    var callNode = (CallNode)node;

                    // process function
                    Console.WriteLine("CallNode: {0}", callNode.ToString());
                    
                    // analyze child nodes
                    foreach (var argNode in callNode.Args.ChildNodes)
                    {
                        argNode.Accept(analyzer);
                    }

                    break;
                case NodeKind.FirstName:
                    // generic variables and defined name variables
                    var firstNameNode = (FirstNameNode)node;
                    Console.WriteLine("FirstNameNode: {0}", firstNameNode.Ident.Name);
                    break;
                default:
                    node.Accept(analyzer);
                    Console.WriteLine("Node: {0}", node.ToString());
                    break;
            }

            return retVal;
        }

        public override bool PreVisit(CallNode node)
        {
            var retVal = Analyze(node);

            return false;
        }

        public override void PostVisit(StrInterpNode node)
        {
        }

        public override void PostVisit(DottedNameNode node)
        {
        }

        public override void PostVisit(UnaryOpNode node)
        {
        }

        public override void PostVisit(BinaryOpNode node)
        {
        }

        public override void PostVisit(VariadicOpNode node)
        {
        }

        public override void PostVisit(CallNode node)
        {
        }

        public override void PostVisit(ListNode node)
        {
        }

        public override void PostVisit(RecordNode node)
        {
        }

        public override void PostVisit(TableNode node)
        {
        }

        public override void PostVisit(AsNode node)
        {
        }

        public override void Visit(ErrorNode node)
        {
        }

        public override void Visit(BlankNode node)
        {
        }

        public override void Visit(BoolLitNode node)
        {
        }

        public override void Visit(StrLitNode node)
        {
        }

        public override void Visit(NumLitNode node)
        {
        }

        public override void Visit(FirstNameNode node)
        {
        }

        public override void Visit(ParentNode node)
        {
        }

        public override void Visit(SelfNode node)
        {
        }
    }
}
